{"ast":null,"code":"// import React, { Fragment, useState, useContext, useEffect } from \"react\";\n// import { loginReq } from \"./fetchApi\";\n// import { LayoutContext } from \"../index\";\n\n// const Login = (props) => {\n//   const { data: layoutData, dispatch: layoutDispatch } = useContext(LayoutContext);\n\n//   const [data, setData] = useState({\n//     email: \"\",\n//     password: \"\",\n//     error: false,\n//     loading: false, // Initialize loading as false\n//   });\n\n//   const [rememberMe, setRememberMe] = useState(false);\n\n//   // Retrieve stored email from localStorage when component mounts\n//   useEffect(() => {\n//     const storedEmail = localStorage.getItem(\"email\");\n//     if (storedEmail) {\n//       setData((prevData) => ({ ...prevData, email: storedEmail }));\n//       setRememberMe(true);\n//     }\n//   }, []);\n\n//   const alert = (msg) => <div className=\"text-xs text-red-500\">{msg}</div>;\n\n//   const formSubmit = async () => {\n//     setData((prevData) => ({ ...prevData, loading: true }));\n//     try {\n//       let responseData = await loginReq({\n//         email: data.email,\n//         password: data.password,\n//       });\n//       if (responseData.error) {\n//         setData({\n//           ...data,\n//           loading: false,\n//           error: responseData.error,\n//           password: \"\",\n//         });\n//       } else if (responseData.token) {\n//         setData({ email: \"\", password: \"\", loading: false, error: false });\n//         localStorage.setItem(\"jwt\", JSON.stringify(responseData));\n\n//         // Store or remove email based on \"Remember Me\"\n//         if (rememberMe) {\n//           localStorage.setItem(\"email\", data.email);\n//         } else {\n//           localStorage.removeItem(\"email\");\n//         }\n\n//         window.location.href = \"/\";\n//       }\n//     } catch (error) {\n//       console.log(error);\n//     }\n//   };\n\n//   return (\n//     <Fragment>\n//       <div className=\"text-center text-2xl mb-6\">Login</div>\n//       {layoutData.loginSignupError && (\n//         <div className=\"bg-red-200 py-2 px-4 rounded\">\n//           You need to login for checkout. Doesn't have an account? Create a new one.\n//         </div>\n//       )}\n//       <form className=\"space-y-4\">\n//         <div className=\"flex flex-col\">\n//           <label htmlFor=\"email\">\n//             Email address\n//             <span className=\"text-sm text-gray-600 ml-1\">*</span>\n//           </label>\n//           <input\n//             onChange={(e) => {\n//               setData({ ...data, email: e.target.value, error: false });\n//               layoutDispatch({ type: \"loginSignupError\", payload: false });\n//             }}\n//             value={data.email}\n//             type=\"text\"\n//             id=\"email\"\n//             className={`${!data.error ? \"\" : \"border-red-500\"} px-4 py-2 focus:outline-none border`}\n//           />\n//           {!data.error ? \"\" : alert(data.error)}\n//         </div>\n//         <div className=\"flex flex-col\">\n//           <label htmlFor=\"password\">\n//             Password<span className=\"text-sm text-gray-600 ml-1\">*</span>\n//           </label>\n//           <input\n//             onChange={(e) => {\n//               setData({ ...data, password: e.target.value, error: false });\n//               layoutDispatch({ type: \"loginSignupError\", payload: false });\n//             }}\n//             value={data.password}\n//             type=\"password\"\n//             id=\"password\"\n//             className={`${!data.error ? \"\" : \"border-red-500\"} px-4 py-2 focus:outline-none border`}\n//           />\n//           {!data.error ? \"\" : alert(data.error)}\n//         </div>\n//         <div className=\"flex flex-col space-y-2 md:flex-row md:justify-between md:items-center\">\n//           <div>\n//             <input\n//               type=\"checkbox\"\n//               id=\"rememberMe\"\n//               className=\"px-4 py-2 focus:outline-none border mr-1\"\n//               checked={rememberMe}\n//               onChange={() => setRememberMe(!rememberMe)}\n//             />\n//             <label htmlFor=\"rememberMe\">Remember me</label>\n//           </div>\n//           <a className=\"block text-gray-600\" href=\"/\">\n//             Forgot your password?\n//           </a>\n//         </div>\n//         <div\n//           onClick={formSubmit}\n//           style={{ background: \"#303031\" }}\n//           className=\"font-medium px-4 py-2 text-white text-center cursor-pointer\"\n//         >\n//           Login\n//         </div>\n//       </form>\n//     </Fragment>\n//   );\n// };\n\n// export default Login;","map":{"version":3,"names":[],"sources":["D:/FinaLProjectCopy/client/src/components/shop/auth/Login.js"],"sourcesContent":["// import React, { Fragment, useState, useContext, useEffect } from \"react\";\r\n// import { loginReq } from \"./fetchApi\";\r\n// import { LayoutContext } from \"../index\";\r\n\r\n\r\n\r\n// const Login = (props) => {\r\n//   const { data: layoutData, dispatch: layoutDispatch } = useContext(LayoutContext);\r\n\r\n//   const [data, setData] = useState({\r\n//     email: \"\",\r\n//     password: \"\",\r\n//     error: false,\r\n//     loading: false, // Initialize loading as false\r\n//   });\r\n\r\n//   const [rememberMe, setRememberMe] = useState(false);\r\n\r\n//   // Retrieve stored email from localStorage when component mounts\r\n//   useEffect(() => {\r\n//     const storedEmail = localStorage.getItem(\"email\");\r\n//     if (storedEmail) {\r\n//       setData((prevData) => ({ ...prevData, email: storedEmail }));\r\n//       setRememberMe(true);\r\n//     }\r\n//   }, []);\r\n\r\n//   const alert = (msg) => <div className=\"text-xs text-red-500\">{msg}</div>;\r\n\r\n//   const formSubmit = async () => {\r\n//     setData((prevData) => ({ ...prevData, loading: true }));\r\n//     try {\r\n//       let responseData = await loginReq({\r\n//         email: data.email,\r\n//         password: data.password,\r\n//       });\r\n//       if (responseData.error) {\r\n//         setData({\r\n//           ...data,\r\n//           loading: false,\r\n//           error: responseData.error,\r\n//           password: \"\",\r\n//         });\r\n//       } else if (responseData.token) {\r\n//         setData({ email: \"\", password: \"\", loading: false, error: false });\r\n//         localStorage.setItem(\"jwt\", JSON.stringify(responseData));\r\n\r\n//         // Store or remove email based on \"Remember Me\"\r\n//         if (rememberMe) {\r\n//           localStorage.setItem(\"email\", data.email);\r\n//         } else {\r\n//           localStorage.removeItem(\"email\");\r\n//         }\r\n\r\n//         window.location.href = \"/\";\r\n//       }\r\n//     } catch (error) {\r\n//       console.log(error);\r\n//     }\r\n//   };\r\n\r\n//   return (\r\n//     <Fragment>\r\n//       <div className=\"text-center text-2xl mb-6\">Login</div>\r\n//       {layoutData.loginSignupError && (\r\n//         <div className=\"bg-red-200 py-2 px-4 rounded\">\r\n//           You need to login for checkout. Doesn't have an account? Create a new one.\r\n//         </div>\r\n//       )}\r\n//       <form className=\"space-y-4\">\r\n//         <div className=\"flex flex-col\">\r\n//           <label htmlFor=\"email\">\r\n//             Email address\r\n//             <span className=\"text-sm text-gray-600 ml-1\">*</span>\r\n//           </label>\r\n//           <input\r\n//             onChange={(e) => {\r\n//               setData({ ...data, email: e.target.value, error: false });\r\n//               layoutDispatch({ type: \"loginSignupError\", payload: false });\r\n//             }}\r\n//             value={data.email}\r\n//             type=\"text\"\r\n//             id=\"email\"\r\n//             className={`${!data.error ? \"\" : \"border-red-500\"} px-4 py-2 focus:outline-none border`}\r\n//           />\r\n//           {!data.error ? \"\" : alert(data.error)}\r\n//         </div>\r\n//         <div className=\"flex flex-col\">\r\n//           <label htmlFor=\"password\">\r\n//             Password<span className=\"text-sm text-gray-600 ml-1\">*</span>\r\n//           </label>\r\n//           <input\r\n//             onChange={(e) => {\r\n//               setData({ ...data, password: e.target.value, error: false });\r\n//               layoutDispatch({ type: \"loginSignupError\", payload: false });\r\n//             }}\r\n//             value={data.password}\r\n//             type=\"password\"\r\n//             id=\"password\"\r\n//             className={`${!data.error ? \"\" : \"border-red-500\"} px-4 py-2 focus:outline-none border`}\r\n//           />\r\n//           {!data.error ? \"\" : alert(data.error)}\r\n//         </div>\r\n//         <div className=\"flex flex-col space-y-2 md:flex-row md:justify-between md:items-center\">\r\n//           <div>\r\n//             <input\r\n//               type=\"checkbox\"\r\n//               id=\"rememberMe\"\r\n//               className=\"px-4 py-2 focus:outline-none border mr-1\"\r\n//               checked={rememberMe}\r\n//               onChange={() => setRememberMe(!rememberMe)}\r\n//             />\r\n//             <label htmlFor=\"rememberMe\">Remember me</label>\r\n//           </div>\r\n//           <a className=\"block text-gray-600\" href=\"/\">\r\n//             Forgot your password?\r\n//           </a>\r\n//         </div>\r\n//         <div\r\n//           onClick={formSubmit}\r\n//           style={{ background: \"#303031\" }}\r\n//           className=\"font-medium px-4 py-2 text-white text-center cursor-pointer\"\r\n//         >\r\n//           Login\r\n//         </div>\r\n//       </form>\r\n//     </Fragment>\r\n//   );\r\n// };\r\n\r\n// export default Login;\r\n"],"mappings":"AAAA;AACA;AACA;;AAIA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}